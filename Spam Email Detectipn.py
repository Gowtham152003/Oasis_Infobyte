# -*- coding: utf-8 -*-
"""Email spam detection with machine learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nTYPodFsiMN5qVeKF3U83A2aygbsEGwi
"""

#Import python liabraries from scikit-learn.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score,f1_score,recall_score,precision_score

#Load dataset
df=pd.read_csv("/content/drive/MyDrive/spam.csv",encoding="latin1")
df

#Check column list present in df
df.columns

#check descriptive statistics
df.info()

#check the number of rows and columns present in df
print('rows---->',df.shape[0])
print('columns---->',df.shape[1])

#Lets see null value count in df
df.isnull().sum()

df.isnull().mean()*100  #check the percentage of null value

df.drop(columns=df[['Unnamed: 2','Unnamed: 3','Unnamed: 4']],axis=1,inplace=True)

df

df.shape

#Rename columns names for easy to understand, we can also use df.rename
df.columns=['spam/ham','sms']

#Convert the text data into numerical form
df.loc[df['spam/ham'] == 'spam', 'spam/ham',] = 0
df.loc[df['spam/ham'] == 'ham', 'spam/ham',] = 1

df

#Devide x and y parameters to train model
x=df.sms
x

y =df['spam/ham']
y

#Devide the whole dataset into training and testing set for model training
from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=3)

print(x.shape)
print(xtrain.shape)
print(xtest.shape)

xtrain,xtest

ytrain,ytest

feat_vect=TfidfVectorizer(min_df=1,stop_words='english',lowercase=True)
feat_vect

ytrain=ytrain.astype('int')
ytest=ytest.astype('int')

xtrain_vec =feat_vect.fit_transform(xtrain)

xtest_vec =feat_vect.transform(xtest)

print(xtrain)

xtrain_vec

print(xtrain_vec)

print(xtest_vec)

logi=LogisticRegression()

logi.fit(xtrain_vec,ytrain)

logi.score(xtrain_vec,ytrain)

logi.score(xtest_vec,ytest)

pred_logi=logi.predict(xtest_vec)
pred_logi

from sklearn.metrics import confusion_matrix,classification_report,accuracy_score

accuracy_score(ytest,pred_logi)

confusion_matrix(ytest,pred_logi)

print(classification_report(ytest,pred_logi))

from google.colab import drive
drive.mount('/content/drive')
